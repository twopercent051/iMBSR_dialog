from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher import FSMContext
from aiogram_calendar import simple_cal_callback, SimpleCalendar
from aiogram.utils.markdown import hstrikethrough
import aiogram_calendar

from tgbot.misc.states import FSMUser, CalendarSG
from tgbot.keyboards.user_inline import *
from tgbot.models.sql_connector import *
from tgbot.misc.datetimer import next_step_timer
from tgbot.handlers.testing import test_descriptor
from create_bot import bot

from datetime import date
from math import ceil
import time
import datetime

from aiogram_dialog import (
    Dialog, DialogManager, DialogRegistry,
    ChatEvent, StartMode, Window,
)
from aiogram_dialog import DialogManager
from aiogram_dialog.widgets.kbd import Calendar
from aiogram_dialog.widgets.text import Const, Format, Multi
from aiogram.dispatcher.filters.state import StatesGroup, State


async def on_date_select(c: CallbackQuery, widget, manager: DialogManager, selected_date: date):
    user_id = c.from_user.id
    user_profile = await get_profile_sql(user_id)
    timezone = user_profile['timezone']
    timestamp_selected = time.mktime(datetime.datetime.strptime(str(selected_date), "%Y-%m-%d").timetuple())
    if timestamp_selected - time.time() < (timezone - 24) * 3600:
        text = ['–í—ã –≤–≤–µ–ª–∏ –¥–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –ø—Ä–æ—à–ª–∞']
        await manager.start(CalendarSG.calendar_showing, mode=StartMode.RESET_STACK)
    else:
        await edit_profile_sql(user_id, 'start_date', timestamp_selected)
        if -24 * 3600 < time.time() + timezone * 3600 - timestamp_selected < 24 * 3600:
            await edit_profile_sql(user_id, 'next_step_time', time.time())
        else:
            days_offset = ceil((timestamp_selected - time.time() - timezone * 3600) / (24 * 3600)) - 1
            next_step = await next_step_timer(timezone, days_offset, 10, 0)
            await edit_profile_sql(user_id, 'next_step_time', next_step)
        await edit_profile_sql(user_id, 'next_step_name', 'week_1:task')
        text = [
            f'‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É {selected_date.strftime("%d.%m.%Y")}',
            '–ù–∞–∫–∞–Ω—É–Ω–µ –º—ã –ø—Ä–∏—à–ª—ë–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–µ—Ä–≤–æ–π –Ω–µ–¥–µ–ª–∏ –∫—É—Ä—Å–∞.'
        ]
    kb = menu_kb()
    await c.message.answer('\n'.join(text), reply_markup=kb)


text_calendar = [
        'üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∫—É—Ä—Å–∞.',
        '–í —ç—Ç–æ—Ç –¥–µ–Ω—å –º—ã –ø—Ä–∏—à–ª—ë–º:',
        '‚úî –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –Ω–∞—á–∞–ª—É –∫—É—Ä—Å–∞,',
        '‚úî –¢–µ–æ—Ä–∏—é –ø–µ—Ä–≤–æ–π –Ω–µ–¥–µ–ª–∏,',
        '‚úî –ü—Ä–∞–∫—Ç–∏–∫–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é',
        '‚úî –î–Ω–µ–≤–Ω–∏–∫ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é.'
    ]

calendarDialog = Dialog(
    Window(
        Const('\n'.join(text_calendar)),
        Calendar(id='calendar_d', on_click=on_date_select),
        state=CalendarSG.calendar_showing,
    )
)


async def calendar_start(message: Message, dialog_manager: DialogManager):
    await dialog_manager.start(CalendarSG.calendar_showing, mode=StartMode.NEW_STACK)


admin_group = config.misc.admin_group


async def user_start(message: Message):
    print(222)
    user_id = message.from_user.id
    is_user = await check_user_sql(user_id)
    if is_user['c'] == 0:
        text = '–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è'
        kb = None
        await FSMUser.name.set()
    else:
        test_result = await get_test_result_sql(user_id, 0)
        if test_result is None:
            text = 'üíõ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∫—É—Ä—Å–∞ –æ—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç üëâ'
            kb = user_start_test_kb(0)
        else:
            text = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
            kb = main_menu_kb()
            await FSMUser.menu.set()
    await message.answer(text, reply_markup=kb)


async def get_name(message: Message, state: FSMContext):
    text = '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥'
    await FSMUser.city.set()
    async with state.proxy() as data:
        data['name'] = message.text
    await message.answer(text)


async def get_city(message: Message, state: FSMContext):
    text = '–í–≤–µ–¥–∏—Ç–µ E-mail'
    await FSMUser.email.set()
    async with state.proxy() as data:
        data['city'] = message.text
    await message.answer(text)


async def get_email(message: Message, state: FSMContext):
    if len(message.text.split('@')) == 2:
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, —á—Ç–æ–±—ã –º—ã –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–æ—á—å—é'
        kb = user_timezone_kb()
        await FSMUser.timezone.set()
        async with state.proxy() as data:
            data['email'] = message.text
        await message.answer(text, reply_markup=kb)
    else:
        text = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞'
        await message.answer(text)


async def get_timezone(callback: CallbackQuery, state: FSMContext):
    text = '–ö–∞–∫–æ–≤—ã –≤–∞—à–∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç –∫—É—Ä—Å–∞?'
    timezone = callback.data.split(':')[1]
    await FSMUser.expectations.set()
    async with state.proxy() as data:
        data['timezone'] = timezone
    await callback.message.answer(text)
    await bot.answer_callback_query(callback.id)


async def get_expectations(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username
    text = 'üíõ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∫—É—Ä—Å–∞ –æ—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç üëâ'
    kb = user_start_test_kb(0)
    async with state.proxy() as data:
        name = data.as_dict()['name']
        city = data.as_dict()['city']
        email = data.as_dict()['email']
        timezone = data.as_dict()['timezone']
    await create_user_sql(user_id, username, name, city, email, timezone, message.text)
    await message.answer(text, reply_markup=kb)


async def main_menu(callback: CallbackQuery):
    text = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
    kb = main_menu_kb()
    await FSMUser.menu.set()
    await callback.message.answer(text, reply_markup=kb)
    await bot.answer_callback_query(callback.id)


async def get_profile(callback: CallbackQuery):
    user_id = callback.from_user.id
    profile = await get_profile_sql(user_id)
    text = [
        'üíª –ü—Ä–æ—Ñ–∏–ª—å',
        f'üë§ –ò–º—è: <i>{profile["name"]}</i>',
        f'üè¢ –ì–æ—Ä–æ–¥: <i>{profile["city"]}</i>',
        f'‚úâÔ∏è –ü–æ—á—Ç–∞: <i>{profile["email"]}</i>',
        'üìã –í–∞—à–∏ –æ–∂–∏–¥–∞–Ω–∏—è:',
        f'<i>{profile["expectations"]}</i>',
    ]
    kb = profile_kb()
    await callback.message.answer('\n'.join(text), reply_markup=kb)
    await bot.answer_callback_query(callback.id)


async def edit_profile_start(callback: CallbackQuery):
    text = '–ß—Ç–æ –±—É–¥–µ–º –º–µ–Ω—è—Ç—å?'
    kb = edit_profile_kb()
    await callback.message.answer(text, reply_markup=kb)
    await bot.answer_callback_query(callback.id)


async def edit_profile_enter(callback: CallbackQuery):
    field = callback.data.split(':')[1]
    text, kb = None, menu_kb()
    time_text = [
        'üïì –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ 30 –º–∏–Ω—É—Ç. –í –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏—à–ª—ë–º –≤–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É üîî.',
        '(–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ hh:mm —á–µ—Ä–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏–µ –Ω–µ –ø–æ–∑–¥–Ω–µ–µ 21:00)'
    ]
    if field == 'name':
        await FSMUser.edit_name.set()
        text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è'
    if field == 'city':
        await FSMUser.edit_city.set()
        text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥'
    if field == 'email':
        await FSMUser.edit_email.set()
        text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π E-mail'
    if field == 'expectations':
        await FSMUser.edit_expectations.set()
        text = '–û–±–Ω–æ–≤–∏—Ç–µ —Å–≤–æ–∏ –æ–∂–∏–¥–∞–Ω–∏—è'
    if field == 'timezone':
        await FSMUser.edit_timezone.set()
        text = '–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å'
        kb = user_timezone_kb()
    if field == 'time_menu':
        await FSMUser.edit_time_menu.set()
        text = ''.join(time_text)
    if field == 'time_task':
        await FSMUser.edit_time_task.set()
        text = '\n'.join(time_text)
    # if field == 'date':
    #     # await CalendarSG.showing.set()
    #     text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∫—É—Ä—Å–∞:"

    await callback.message.answer(text, reply_markup=kb)
    await bot.answer_callback_query(callback.id)


async def edit_profile_finish_msg(message: Message, state: FSMContext):
    user_id = message.from_user.id
    stat_cor = await state.get_state()
    stat = stat_cor.split(':')[1]
    value = message.text
    text = None
    kb = menu_kb()
    if stat == 'edit_name':
        text = '–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ'
    if stat == 'edit_city':
        text = '–ì–æ—Ä–æ–¥ –∏–∑–º–µ–Ω—ë–Ω'
    if stat == 'edit_email':
        if len(message.text.split('@')) == 2:
            text = '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞'
        else:
            text = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞'
            await message.answer(text, reply_markup=kb)
            return
    if stat == 'edit_expectations':
        text = '–û–∂–∏–¥–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω—ã'
    if stat == 'edit_time_task' or stat == 'edit_time_menu':
        text_error = '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏'
        try:
            hour = int(message.text.split(':')[0])
            minute = int(message.text.split(':')[1])
            if 0 <= hour <= 20 and 0 <= minute <= 59 and len(message.text.split(':')) == 2:
                text = '–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ'
                await edit_profile_sql(user_id, 'remind_hour', hour)
                await edit_profile_sql(user_id, 'remind_min', minute)
                await message.answer(text, reply_markup=kb)
                if stat == 'edit_time_task':
                    profile = await get_profile_sql(user_id)
                    user_tz = profile['timezone']
                    remind_1_time = await next_step_timer(user_tz, 1, hour, minute)
                    await edit_profile_sql(user_id, 'day', 1)
                    await edit_profile_sql(user_id, 'remind_meditation_time', remind_1_time)
                return
            else:
                await message.answer(text_error, reply_markup=kb)
                return
        except ValueError:
            await message.answer(text_error, reply_markup=kb)
            return
    await edit_profile_sql(user_id, stat.split('_')[1], value)
    await message.answer(text, reply_markup=kb)


async def edit_profile_finish_clb(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    stat_cor = await state.get_state()
    stat = stat_cor.split(':')[1]
    value = int(callback.data.split(':')[1])
    text = '–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑–º–µ–Ω–µ–Ω'
    kb = menu_kb()
    await edit_profile_sql(user_id, stat.split('_')[1], value)
    await callback.message.answer(text, reply_markup=kb)
    await bot.answer_callback_query(callback.id)


async def calender(callback: CallbackQuery):
    text = [
        'üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∫—É—Ä—Å–∞.',
        '–í —ç—Ç–æ—Ç –¥–µ–Ω—å –º—ã –ø—Ä–∏—à–ª—ë–º:',
        '‚úî –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –Ω–∞—á–∞–ª—É –∫—É—Ä—Å–∞,',
        '‚úî –¢–µ–æ—Ä–∏—é –ø–µ—Ä–≤–æ–π –Ω–µ–¥–µ–ª–∏,',
        '‚úî –ü—Ä–∞–∫—Ç–∏–∫–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é',
        '‚úî –î–Ω–µ–≤–Ω–∏–∫ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é.'
    ]
    kb = await aiogram_calendar.SimpleCalendar().start_calendar()
    await callback.message.answer('\n'.join(text), reply_markup=kb)


async def edit_date(callback: CallbackQuery, callback_data):
    user_id = callback.from_user.id

    async def on_date_selected(c: CallbackQuery, widget, manager: DialogManager, selected_date: date):
        user_profile = await get_profile_sql(user_id)
        timezone = user_profile['timezone']
        if selected_date.timetuple() - time.time() < (timezone - 24) * 3600:
            text = ['–í—ã –≤–≤–µ–ª–∏ –¥–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –ø—Ä–æ—à–ª–∞']
            kb = await aiogram_calendar.SimpleCalendar().start_calendar()
        else:
            await edit_profile_sql(user_id, 'start_date', date.timetuple())
            if -24 * 3600 < time.time() + timezone * 3600 - selected_date.timetuple() < 24 * 3600:
                await edit_profile_sql(user_id, 'next_step_time', time.time())
            else:
                days_offset = ceil((selected_date.timetuple() - time.time() - timezone * 3600) / (24 * 3600)) - 1
                next_step = await next_step_timer(timezone, days_offset, 10, 0)
                await edit_profile_sql(user_id, 'next_step_time', next_step)
            await edit_profile_sql(user_id, 'next_step_name', 'week_1:task')
            text = [
                f'‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É {date.strftime("%d.%m.%Y")}',
                '–ù–∞–∫–∞–Ω—É–Ω–µ –º—ã –ø—Ä–∏—à–ª—ë–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–µ—Ä–≤–æ–π –Ω–µ–¥–µ–ª–∏ –∫—É—Ä—Å–∞.'
            ]
            kb = menu_kb()
        await callback.message.answer('\n'.join(text), reply_markup=kb)

    calendar = Calendar(id='calendar', on_click=on_date_selected)
    # selected = await SimpleCalendar().process_selection(callback, callback_data)
    '''user_profile = await get_profile_sql(user_id)
    timezone = user_profile['timezone']
    if selected:
        if date.timestamp() - time.time() < (timezone - 24) * 3600:
            text = ['–í—ã –≤–≤–µ–ª–∏ –¥–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –ø—Ä–æ—à–ª–∞']
            kb = await aiogram_calendar.SimpleCalendar().start_calendar()
        else:
            await edit_profile_sql(user_id, 'start_date', date.timestamp())
            if -24 * 3600 < time.time() + timezone * 3600 - date.timestamp() < 24 * 3600:
                await edit_profile_sql(user_id, 'next_step_time', time.time())
            else:
                days_offset = ceil((date.timestamp() - time.time() - timezone * 3600) / (24 * 3600)) - 1
                next_step = await next_step_timer(timezone, days_offset, 10, 0)
                await edit_profile_sql(user_id, 'next_step_time', next_step)
            await edit_profile_sql(user_id, 'next_step_name', 'week_1:task')
            text = [
                f'‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É {date.strftime("%d.%m.%Y")}',
                '–ù–∞–∫–∞–Ω—É–Ω–µ –º—ã –ø—Ä–∏—à–ª—ë–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–µ—Ä–≤–æ–π –Ω–µ–¥–µ–ª–∏ –∫—É—Ä—Å–∞.'
            ]
            kb = menu_kb()
        await callback.message.answer('\n'.join(text), reply_markup=kb)'''


async def practice_counter(callback: CallbackQuery):
    user_id = callback.from_user.id
    is_done = callback.data.split('|')[0].split(':')[1]
    week_id = callback.data.split(':')[2]
    practice = await get_practices_sql(user_id, week_id)
    if practice is None:
        practice_count = 0
    else:
        practice_count = practice['counter']
    if is_done == 'not':
        text = f'–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–ª—É—á–∏—Ç—Å—è üí™\n‚úî –í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∞–∫—Ç–∏–∫ –Ω–∞ –Ω–µ–¥–µ–ª–µ: {practice_count}'
    else:
        if practice is None:
            await create_practices_sql(user_id, week_id)
        else:
            await edit_practices_sql(user_id, week_id, practice_count + 1)
        text = f'–û—Ç–ª–∏—á–Ω–æ, –≤—ã –º–æ–ª–æ–¥–µ—Ü ü•≥\n‚úî –í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∞–∫—Ç–∏–∫ –Ω–∞ –Ω–µ–¥–µ–ª–µ: {practice_count + 1}'
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(text)


async def current_result(callback: CallbackQuery):
    user_id = callback.from_user.id
    profile = await get_profile_sql(user_id)
    if profile['week_id'] < 3:
        test_week_id = 0
        old_result = None
    elif profile['week_id'] < 8:
        test_week_id = 3
        old_result = await get_test_result_sql(user_id, 0)
    else:
        test_week_id = 8
        old_result = await get_test_result_sql(user_id, 3)
    tests = await get_test_result_sql(user_id, test_week_id)
    practices = await get_practices_sql(user_id, profile['week_id'])
    if profile['start_date'] is None:
        start_date = '–ù–µ –≤—ã–±—Ä–∞–Ω–∞'
    else:
        start_date = datetime.datetime.fromtimestamp(profile['start_date']).strftime('%d.%m.%Y')
    if profile['remind_hour'] is None:
        practice_time = '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'
    else:
        if profile["remind_min"] < 10:
            minutes = f'0{profile["remind_min"]}'
        else:
            minutes = profile["remind_min"]
        practice_time = f'{profile["remind_hour"]}:{minutes}'
    if profile['week_id'] == 0:
        current_week = '–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∫—É—Ä—Å'
    else:
        current_week = profile['week_id']
    if practices is None:
        counter = 0
    else:
        counter = practices['counter']
    text = [
        'üí™ <b><u>–¢–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—É—Ä—Å–∞</u></b>\n',
        f'üèÅ <b>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∫—É—Ä—Å–∞:</b> {start_date}',
        f'üïí <b>–í—Ä–µ–º—è –ø—Ä–∞–∫—Ç–∏–∫–∏:</b> {practice_time}',
        f'üìÜ <b>–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è:</b> {current_week}',
        f'‚úî <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∞–∫—Ç–∏–∫ –Ω–∞ –Ω–µ–¥–µ–ª–µ:</b> {counter}\n',

    ]
    if tests is not None:
        desc = test_descriptor(tests['anxiety'], tests['depression'])
        if test_week_id == 0:
            text_test = [
                '-' * 10,
                '\n‚≠êÔ∏è <b><u>–¢–µ–∫—É—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è</u></b>\n',
                f'<b>–¢—Ä–µ–≤–æ–≥–∞:</b> {tests["anxiety"]} –±–∞–ª–ª–æ–≤',
                f'{desc[0]}\n',
                f'<b>–î–µ–ø—Ä–µ—Å—Å–∏—è:</b> {tests["depression"]} –±–∞–ª–ª–æ–≤',
                desc[1]
            ]
        else:
            text_test = [
                '-' * 10,
                '\n‚≠êÔ∏è <b><u>–¢–µ–∫—É—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è</u></b>\n',
                f'<b>–¢—Ä–µ–≤–æ–≥–∞:</b> {hstrikethrough(old_result["anxiety"])} ‚Üí {tests["anxiety"]} –±–∞–ª–ª–æ–≤',
                f'{desc[0]}\n',
                f'<b>–î–µ–ø—Ä–µ—Å—Å–∏—è:</b> {hstrikethrough(old_result["depression"])} ‚Üí {tests["depression"]} –±–∞–ª–ª–æ–≤',
                desc[1]
            ]
        text.extend(text_test)
    if profile['start_date'] is None or profile['start_date'] > time.time():
        kb = current_result_kb(True)
    else:
        kb = current_result_kb(False)
    await callback.message.answer('\n'.join(text), reply_markup=kb)
    await bot.answer_callback_query(callback.id)


async def user_reset(callback: CallbackQuery):
    text, kb = None, None
    if callback.data.split(':')[1] == 'request':
        text = '–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫—É—Ä—Å–∞ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ? –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ'
        kb = reset_kb()
    if callback.data.split(':')[1] == 'accept':
        user_id = callback.from_user.id
        text = 'üíõ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∫—É—Ä—Å–∞ –æ—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç üëâ'
        kb = user_start_test_kb(0)
        await reset_user_sql(user_id)
    await callback.message.answer(text, reply_markup=kb)
    await bot.answer_callback_query(callback.id)


async def practices(callback: CallbackQuery):
    if callback.data.split(':')[1] == 'menu':
        user_id = callback.from_user.id
        profile = await get_profile_sql(user_id)
        if profile['start_date'] is None:
            text = [
                '‚ùå –í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∫—É—Ä—Å',
                '‚úÖ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –ø–µ—Ä–≤–æ–π –Ω–µ–¥–µ–ª–∏ - –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∫—É—Ä—Å–∞ üëá'
            ]
            kb = get_date_kb()
        else:
            if profile['week_id'] == 0:
                dt = datetime.datetime.fromtimestamp(profile['start_date'])
                text = [
                    f'‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É {dt.strftime("%d.%m.%Y")}',
                    '–ù–∞–∫–∞–Ω—É–Ω–µ –º—ã –ø—Ä–∏—à–ª—ë–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–µ—Ä–≤–æ–π –Ω–µ–¥–µ–ª–∏ –∫—É—Ä—Å–∞.'
                ]
                kb = menu_kb()
            else:
                text = ['–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –∫—É—Ä—Å–∞']
                kb = practices_kb(profile['week_id'])
    else:
        week_id = int(callback.data.split(':')[1])
        text_request = await get_text_sql(week_id)
        text = [text_request['task']]
        kb = menu_kb()
    await callback.message.answer('\n'.join(text), reply_markup=kb)
    await bot.answer_callback_query(callback.id)


async def support_start(callback: CallbackQuery):
    if callback.data.split(':')[1] == 'support':
        text = [
            '‚úèÔ∏è <b>–ù–∞–ø–∏—à–∏—Ç–µ –≤ –æ—Ç–≤–µ—Ç, –æ —á—ë–º —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∏–ª–∏ –≤ —á—ë–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å.</b>',
            'üíÅ –ù–∞ —Å–≤—è–∑–∏ –Ω–∞—à —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π <i>—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –í–∏—Ç–∞–ª–∏–π –°—É–≤–æ—Ä–æ–≤</i> - –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª—è—Ö.',
            'üíÅ‚Äç‚ôÄÔ∏è –ê —Ç–∞–∫–∂–µ —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π <i>–∫–æ—É—á –°–≤–µ—Ç–ª–∞–Ω–∞ –®–µ–≤–æ—Ü—É–∫–æ–≤–∞</i> - –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫—É—Ä—Å—É –∏ –ø–æ–º–æ–∂–µ—Ç –≤ '
            '–µ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏\n',
            '<i>*–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∫—É—Ä—Å—É —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å—é–¥–∞</i>'
        ]
        kb = menu_kb()
        await FSMUser.support.set()
    else:
        text = [
            '‚úèÔ∏è <b>–ù–∞–ø–∏—à–∏—Ç–µ –≤ –æ—Ç–≤–µ—Ç, —Å–≤–æ–π –æ—Ç–∑—ã–≤ –æ –∫—É—Ä—Å–µ</b> <i>(—á–µ–º –ø–æ–º–æ–≥, —á—Ç–æ –Ω–æ–≤–æ–≥–æ —É–∑–Ω–∞–ª–∏, –≤ —á—ë–º –≤–æ–∑–Ω–∏–∫–ª–∏ '
            '—Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Ç.–ø.)</i>',
            'üëç –ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ –≥–æ—Ç–æ–≤—ã –º–µ–Ω—è—Ç—å—Å—è –≤ –ª—É—á—à—É—é —Å—Ç–æ—Ä–æ–Ω—É!'
        ]
        kb = menu_kb()
        await FSMUser.feedback.set()
    await callback.message.answer('\n'.join(text), reply_markup=kb)
    await bot.answer_callback_query(callback.id)


async def support_finish(message: Message):
    user_id = message.from_user.id
    user_username = message.from_user.username
    user_text = '–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
    user_kb = menu_kb()
    admin_text = [
        f'–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_username}',
        '-' * 10,
        message.text
    ]
    admin_kb = support_kb(user_id)
    await message.answer(user_text, reply_markup=user_kb)
    await bot.send_message(admin_group, '\n'.join(admin_text), reply_markup=admin_kb)


async def feedback_finish(message: Message):
    user_username = message.from_user.username
    user_text = '–û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'
    user_kb = menu_kb()
    admin_text = [
        f'–û—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_username}',
        '-' * 10,
        message.text
    ]
    await message.answer(user_text, reply_markup=user_kb)
    await bot.send_message(admin_group, '\n'.join(admin_text))


async def donate(callback: CallbackQuery):
    if callback.data.split(':')[1] == 'start':
        text = [
            'ü§≤ –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –Ω–∞—à –ø—Ä–æ–µ–∫—Ç\n',
            '‚ù§Ô∏è –ú—ã –æ—á–µ–Ω —Å—Ç–∞—Ä–∞–µ–º—Å—è, —á—Ç–æ–±—ã –Ω–∞—à –ø—Ä–æ–µ–∫—Ç –±—ã–ª –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è —à–∏—Ä–æ–∫–æ–≥–æ –∫—Ä—É–≥–∞ –ª–∏—Ü –∏ –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∂–¥–æ–º—É, '
            '–ø–æ—ç—Ç–æ–º—É –∫—É—Ä—Å iMBSR <b>–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π.</b> –ß—Ç–æ–±—ã –æ–Ω –æ—Å—Ç–∞–≤–∞–ª—Å—è —Ç–∞–∫–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ –¥–æ–ª—å—à–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–¥–µ—Ä–∂–∏—Ç–µ '
            '–Ω–∞—Å –ª—é–±–æ–π —Å—É–º–º–æ–π üôè'
        ]
        kb = donate_kb()
    else:
        text = [
            '–†–µ–∫–≤–∏–∑–∏—Ç—ã:',
            '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã 4276 3801 8067 6483',
            '–í–ª–∞–¥–µ–ª–µ—Ü –°—É–≤–æ—Ä–æ–≤ –í.–û.',
            '–°–±–µ—Ä–±–∞–Ω–∫'
        ]
        kb = menu_kb()
    await callback.message.answer('\n'.join(text), reply_markup=kb)
    await bot.answer_callback_query(callback.id)


def register_user(dp: Dispatcher):
    edit_fsm_list = [FSMUser.edit_name, FSMUser.edit_city, FSMUser.edit_email, FSMUser.edit_expectations,
                     FSMUser.edit_time_task, FSMUser.edit_time_menu]

    dp.register_message_handler(user_start, commands=["start", 'menu'], state="*")
    dp.register_message_handler(get_name, content_types='text', state=FSMUser.name)
    dp.register_message_handler(get_city, content_types='text', state=FSMUser.city)
    dp.register_message_handler(get_email, content_types='text', state=FSMUser.email)
    dp.register_message_handler(get_expectations, content_types='text', state=FSMUser.expectations)
    dp.register_message_handler(edit_profile_finish_msg, content_types='text', state=edit_fsm_list)
    dp.register_message_handler(support_finish, content_types='text', state=FSMUser.support)
    dp.register_message_handler(feedback_finish, content_types='text', state=FSMUser.feedback)

    # registry = DialogRegistry(dp)
    # registry.register(calendarDialog)
    # dp.register_callback_query_handler(calendar_start, lambda x: x.data == 'calendar_start', state="*")

    dp.register_callback_query_handler(get_timezone, lambda x: x.data.split(':')[0] == 'tz', state=FSMUser.timezone)
    dp.register_callback_query_handler(main_menu, lambda x: x.data == 'main_menu', state='*')
    dp.register_callback_query_handler(get_profile, lambda x: x.data == 'profile', state='*')
    dp.register_callback_query_handler(edit_profile_start, lambda x: x.data == 'edit_profile', state='*')
    dp.register_callback_query_handler(edit_profile_enter, lambda x: x.data.split(':')[0] == 'edit', state='*')
    dp.register_callback_query_handler(edit_profile_finish_clb, lambda x: x.data.split(':')[0] == 'tz',
                                       state=FSMUser.edit_timezone)
    dp.register_callback_query_handler(edit_date, simple_cal_callback.filter(), state='*')
    dp.register_callback_query_handler(practice_counter, lambda x: x.data.split(':')[0] == 'done', state='*')
    dp.register_callback_query_handler(current_result, lambda x: x.data == 'current_result', state='*')
    dp.register_callback_query_handler(calender, lambda x: x.data == 'edit:date', state='*')
    dp.register_callback_query_handler(user_reset, lambda x: x.data.split(':')[0] == 'reset', state='*')
    dp.register_callback_query_handler(practices, lambda x: x.data.split(':')[0] == 'practices', state='*')
    dp.register_callback_query_handler(support_start, lambda x: x.data.split(':')[0] == 'support', state='*')
    dp.register_callback_query_handler(donate, lambda x: x.data.split(':')[0] == 'donate', state='*')

    # return registry
